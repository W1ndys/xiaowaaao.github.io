<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习</title>
      <link href="/post/fbaff1b6.html"/>
      <url>/post/fbaff1b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><h2 id="1、变量与字符串："><a href="#1、变量与字符串：" class="headerlink" title="1、变量与字符串："></a>1、变量与字符串：</h2><p><strong>命名规则</strong>：可以使用字母数字及下划线，但是不能以数字开头，python3已支持中文命名</p><p><strong>字符串</strong>：可以使用’ ’“ “’‘’ ‘’‘三种类型转义字符，在引号前面加&#x2F; 进行转义，或者使用固定的 &#x2F;n 等等</p><p><strong>原生字符</strong>，可以在引号前加 r 代表不使用转义字符意思<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122214409117.png" alt="image-20240122214409117"></p><h2 id="2、导入模块及模块介绍："><a href="#2、导入模块及模块介绍：" class="headerlink" title="2、导入模块及模块介绍："></a>2、导入模块及模块介绍：</h2><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">​random.randint (a,b)#就是生成一个在a到b范围的整数</span><br></pre></td></tr></table></figure><p>​<strong>伪随机数攻击：</strong></p><p>​随机数的生成是有种子生成，而大多数的种子是当前系统的时间当做种子数，因此可以通过获取这个种子来进行伪随机数攻击，使用random.getstate()函数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=random.getstate()  #获取当前的种子状态</span><br><span class="line"></span><br><span class="line">​random.setstate(x)    #将种子数重现</span><br><span class="line"></span><br><span class="line">​random.randint(a,b)#进行伪随机数攻击</span><br></pre></td></tr></table></figure><h2 id="3、数字类型"><a href="#3、数字类型" class="headerlink" title="3、数字类型"></a>3、数字类型</h2><p>​数字类型有整形，浮点型，在python中，对于浮点型·的计算有时候会产生误差，比如在python中，<strong>0.3 &lt; 0.1 + 0.2</strong>  这在比较中就会产生误差，因此要进行规避，使用函数进行精确计算，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import decimal</span><br><span class="line"></span><br><span class="line">​a = decimal.Decimal(&#x27;0.1&#x27;)</span><br><span class="line"></span><br><span class="line">​b = decimal.Decimal(&#x27;0.2&#x27;)</span><br><span class="line"></span><br><span class="line">​print(a + b)</span><br></pre></td></tr></table></figure><pre><code>   还有复数，例如：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> x = 1 + 2j</span><br><span class="line"></span><br><span class="line">​x.real#获取这个复数的实部</span><br><span class="line"></span><br><span class="line">​x.imag#获取这个复数的虚部</span><br></pre></td></tr></table></figure><h2 id="4、数字的运算"><a href="#4、数字的运算" class="headerlink" title="4、数字的运算"></a>4、数字的运算</h2><p>​<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122222207694.png" alt="image-20240122222207694"></p><h2 id="5、逻辑运算符："><a href="#5、逻辑运算符：" class="headerlink" title="5、逻辑运算符："></a>5、逻辑运算符：</h2><p>​and        or        not    结果是影响运算的数据</p><p>​    3  and 4   &#x3D;&#x3D;&#x3D;》   4</p><p>​    3  or  4   &#x3D;&#x3D;&#x3D;&#x3D;》 3</p><p>​    0  and 3  &#x3D;&#x3D;&#x3D;&#x3D;》0</p><p><strong>优先级</strong>：越往下，优先级越高</p><p>​<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122224450420.png" alt="image-20240122224450420"></p><h2 id="6、分支与循环："><a href="#6、分支与循环：" class="headerlink" title="6、分支与循环："></a>6、分支与循环：</h2><p>​<strong>分支：</strong></p><p>​<strong>if   if …else   if … elif    if … elif  ….else</strong></p><p>​<strong>循环：</strong></p><p>​<strong>whilefor</strong></p><p>​<strong>continue</strong>    与<strong>break</strong>的区别：</p><p>​     continue是跳出本次循环的结果，不执行这次的运行，回到循环体的开头进行下一次循环；</p><p>​ break则是直接跳出循环体，不再执行循环结构，循环结束。</p><p>​但是两者只能作用于<strong>一层循环体</strong></p><p>​while   与    else  的配合,例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">day = 1</span><br><span class="line"></span><br><span class="line">​while day &lt;=7 :</span><br><span class="line"></span><br><span class="line">​answer = input(&quot;今天你有好好学习吗？&quot;)</span><br><span class="line"></span><br><span class="line">​if answer != &quot;yes&quot; :</span><br><span class="line"></span><br><span class="line">​**break**</span><br><span class="line"></span><br><span class="line">​day+=1</span><br><span class="line"></span><br><span class="line">​**else:**</span><br><span class="line"></span><br><span class="line">​print(&quot;very good！&quot;)</span><br></pre></td></tr></table></figure><p>​for循环的使用：</p><p>​for变量in可迭代对象：</p><p>​通常与之配合的，range() 函数，比如：</p><p>​range(stop)range(start,stop)range(start,stop,step)</p><p>​或者是一个字符串</p><p>​for each in “XiaoWaaa”:</p><p>​print(each)</p><h2 id="7、存储类型："><a href="#7、存储类型：" class="headerlink" title="7、存储类型："></a>7、存储类型：</h2><h3 id="1、列表："><a href="#1、列表：" class="headerlink" title="1、列表："></a>1、列表：</h3><p>​列表可以容纳多种类型的数据，相邻数据之间使用，分隔，并且用[]进行包含，例如： [1,2,3,4,5] [1,2,3,4,”字符串”]这两个都是列表；</p><h4 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h4><p>​列表的重要功能，可以一次取出多个列表中的数据值，写作方式： **list[开始索引:结束索引:step]**，如要倒序输出，则可以[::-1]</p><h4 id="增加："><a href="#增加：" class="headerlink" title="增加："></a>增加：</h4><p>​列表如果要增加元素，可以通过<strong>append()<strong>方法进行追加,但是append()方法一次只能</strong>添加一个元素</strong>，例如： list.append(5)</p><p>​如果要一次追加多个元素们可以使用<strong>extend()<strong>方法，可以一次追加一个</strong>可迭代对象</strong>，例如： list.extend([7,8,9])</p><p>​如果在任意位置进行添加数据，则可以使用insert()方法，具体使用：</p><p>list.insert(要插入的位置索引，要插入的元素)</p><p>list.insert(1,2)</p><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><p>​列表如果要删除元素，可以使用remove()方法，删除指定的元素，比如删除列表中的5，则可以使用list.remove(5)，如果元素不存在，责护报错</p><p>​如果要删除指定位置的元素，则可以使用pop方法，具体使用如下：list.pop(3),删除索引值为3的元素</p><p>​如果要清空列表的值，则可以使用clear()方法，具体使用如下：list.clear()</p><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><p>​列表如果要修改元素的值，可以使用下表索引的方法进行修改，比如list[2]&#x3D;5,就将列表第三个元素修改为5</p><p>​列表如果要一次修改多个元素的值，可以使用分片的方法进行修改，比如list[3:]&#x3D;[4,5,6],就是将第四个元素之后的全部元素替换成4 5 6</p><p>​列表修改的其他功能还有<strong>排序</strong>功能，可以使用<strong>sort()<strong>方法进行排序，使用方法：list.sort(),进行升序排序，降序方法可以在sort方法中进行插入值，如</strong>list.sort(reverse&#x3D;True)</strong>,*<em>逆序的功能使用</em>***reverse()**方法进行，如list.reverse();</p><h4 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h4><p>​查找元素<strong>出现的次数</strong>：**count()**方法，例如list.count(3),查找元素中3出现的次数</p><p>​查找元素的<strong>下标值</strong>，使用<strong>index()<strong>方法。例如，list.index(2),查找元素为2的第一次出现的下标索引值，同时，index方法还有一些参数可以添加，比如：</strong>index(元素，start，stop)</strong></p><p>​<strong>复制列表</strong>，使用**copy()**方法，list_copy&#x3D;list.copy()，将list列表复制到list_copy中</p><h4 id="二维列表："><a href="#二维列表：" class="headerlink" title="二维列表："></a>二维列表：</h4><p>​<strong>访问</strong>二维列表：</p><pre><code>            matrix=[[1,2,3],        [4,5,6],        [7,8,9]]for i in matrix :    for j in i:        print(j)print(matrix[2][1])</code></pre><p>​<strong>创建</strong>：</p><p>​正确的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A =[0]*3</span><br><span class="line">for i in range(3):</span><br><span class="line">    A[i]=[0]*3</span><br><span class="line">print(A)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​错误的创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = [[0]*3]*3</span><br><span class="line">print(B)</span><br><span class="line">B[2][1]=1</span><br><span class="line">print(B)</span><br></pre></td></tr></table></figure><p>使用错误的创建，会导致修改一处数据使得全部的数据都会被修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><br><span class="line">[[0, 1, 0], [0, 1, 0], [0, 1, 0]]</span><br></pre></td></tr></table></figure><p>​可以使用    <strong>is</strong>    运算符检测是不是数据相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(B[1] is B[2])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; x= &quot;XiaoWaaa&quot;</span><br><span class="line">y=&quot;XiaoWaaa&quot;</span><br><span class="line">print(x is y)</span><br><span class="line">&gt;&gt;&gt; print(x is y)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>所以两者的指向是相同的，就相当于x 与 y 都是指向一个地址，夙愿修改一处就相当于把地址处的数据进行修改，所以修改数据会同时修改，所以如果要只修改一处代码，就该进行深拷贝，这就用到copy模块中的deepcopy () 函数，其中copy函数是浅拷贝，效率更高，但是浅拷贝完是一体的，所以就使用deepcopy函数。</p><p>deepcopy函数的图示：</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240124120309508.png" alt="image-20240124120309508"></p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">x=[[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">y=copy.deepcopy(x)</span><br><span class="line">y[1][1]=9</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">列表x的数据： [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span><br><span class="line">列表y的数据： [[1, 2, 3], [4, 9, 6], [7, 8, 9]]</span><br></pre></td></tr></table></figure><h4 id="列表推导式："><a href="#列表推导式：" class="headerlink" title="列表推导式："></a>列表推导式：</h4><p>结构形式：</p><p>​[<em><strong>要进行的操作</strong></em><em>fortargetin可迭代对象</em>]（基础形式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x=[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; [i+1 for i in x]</span><br><span class="line">[2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; y = [i*2 for i in x]</span><br><span class="line">&gt;&gt;&gt; print(y)</span><br><span class="line">[2, 4, 6, 8]</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>​[循环体fortargetin可迭代对象<strong>ifcondition</strong>]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">word =[&#x27;Apple&#x27;,&#x27;ABC&#x27;,&#x27;HAHAHA&#x27;]</span><br><span class="line">y=[i for i in word if i[0] == &#x27;A&#x27;]</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">nums=[1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">nums=[[x,y] for x in nums if x%2==0 for y in nums if y %3 == 0]</span><br><span class="line">print(nums)</span><br><span class="line">结果：</span><br><span class="line">[&#x27;Apple&#x27;, &#x27;ABC&#x27;]</span><br><span class="line">[[2, 3], [2, 6], [2, 9], [4, 3], [4, 6], [4, 9], [6, 3], [6, 6], [6, 9], [8, 3], [8, 6], [8, 9], [10, 3], [10, 6], [10, 9]]</span><br></pre></td></tr></table></figure><h3 id="2、元组："><a href="#2、元组：" class="headerlink" title="2、元组："></a>2、元组：</h3><p>​元组使用()表示，是一个不可修改的类型，同时元组里面也可以存在多种类型的数据，如： (1,,2,3,[4,5,6],‘XiaoWaaa’),只有元组里面有可修改的类型，如列表，那么才可以进行修改；</p><p>​元组的查找，和列表相同，支持count和index查找；</p><p>​元组的<strong>打包和解包</strong>：(任何类型都一样)</p><p>​将多个元素放在一起叫做打包，将数据分别分给其他变量叫做解包如：</p><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x,y,z=(1,2,3)</span><br></pre></td></tr></table></figure><h3 id="3、字符串："><a href="#3、字符串：" class="headerlink" title="3、字符串："></a>3、字符串：</h3><p>不可变类型</p><h4 id="大小写字母变换："><a href="#大小写字母变换：" class="headerlink" title="大小写字母变换："></a>大小写字母变换：</h4><p>1、capitalize</p><p>作用是将字符串的首字母大写，其他变成小写，如下;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=&quot;I love XiaoWaaa&quot;</span><br><span class="line">&gt;&gt;&gt; x.capitalize()</span><br><span class="line">&#x27;I love xiaowaaa&#x27;</span><br></pre></td></tr></table></figure><p>2、casefold</p><p>作用是将字符串的所有字母变成小写，但是casefold的处理范围不局限于英语，德语也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> x.casefold()</span><br><span class="line">&#x27;i love xiaowaaa&#x27;</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>3、title</p><p>作用是将字符串的所有字母的首字母变成大写，剩余字符全部变成小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.title()</span><br><span class="line">&#x27;I Love Xiaowaaa&#x27;</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>4、swapcase</p><p>作用是将字符串的所有字母进行大小写转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.swapcase()</span><br><span class="line">&#x27;i LOVE xIAOwAAA&#x27;</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>5、upper</p><p>作用是将所有的字母变成大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.upper()</span><br><span class="line">&#x27;I LOVE XIAOWAAA&#x27;</span><br></pre></td></tr></table></figure><p>6、lower</p><p>作用是将所有的字符转换为小写，局限于英语字母变小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.lower()</span><br><span class="line">&#x27;i love xiaowaaa&#x27;</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><h4 id="左中右对齐："><a href="#左中右对齐：" class="headerlink" title="左中右对齐："></a>左中右对齐：</h4><p>1、居中对齐center</p><p>格式：center(width,fillchar&#x3D;’’)</p><p>后面那个参数是用什么填充，默认是空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x=&quot;学不会，就别学！&quot;</span><br><span class="line">&gt;&gt;&gt; x.center(15)</span><br><span class="line">&#x27;    学不会，就别学！   &#x27;</span><br><span class="line">&gt;&gt;&gt; x.center(15, &quot;哈&quot;)</span><br><span class="line">&#x27;哈哈哈哈学不会，就别学！哈哈哈&#x27;</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>2、左对齐ljust</p><p>格式：ljust(width,fillchar&#x3D;’’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.ljust(15)</span><br><span class="line">&#x27;学不会，就别学！       &#x27;</span><br></pre></td></tr></table></figure><p>3、右对齐rjust</p><p>格式：rjust(width,fillchar&#x3D;’’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.rjust(15)</span><br><span class="line">&#x27;       学不会，就别学！&#x27;</span><br></pre></td></tr></table></figure><p>4、zfill</p><p>格式 zfill(width),一般是做报表进行格式统一的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;520&quot;.zfill(5)</span><br><span class="line">&#x27;00520&#x27;</span><br><span class="line">&gt;&gt;&gt; &quot;-521&quot;.zfill(5)</span><br><span class="line">&#x27;-0521&#x27;</span><br><span class="line">&gt;&gt;&gt; x.zfill(15)</span><br><span class="line">&#x27;0000000学不会，就别学！&#x27;</span><br></pre></td></tr></table></figure><h4 id="查找：-1"><a href="#查找：-1" class="headerlink" title="查找："></a>查找：</h4><p>1、count</p><p>格式：count(查找的字符串，起始位置，末位置)</p><p>作用是查找字符出现的次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x=&quot;上海自来水来自海上&quot;</span><br><span class="line">&gt;&gt;&gt; x.count(&quot;海&quot;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; x.count(&quot;海&quot;,0,5)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>2、find方法</p><p>格式：find（查找的字符串，起始位置，末位置）</p><p>作用：查找字符出现的下边，如果查询不到要查询的字符便会输出-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.find(&quot;海&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>3、rfind方法</p><p>格式：find（查找的字符串，起始位置，末位置）</p><p>作用是：从右往左查找下标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x.rfind(&quot;海&quot;)</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>4、index方法</p><p>作用和find方法一样，但是如果查询不到要查询的字符，便会抛出异常</p>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moectf的junk_code题解</title>
      <link href="/post/64c44478.html"/>
      <url>/post/64c44478.html</url>
      
        <content type="html"><![CDATA[<h1 id="Moectf的junk-code"><a href="#Moectf的junk-code" class="headerlink" title="Moectf的junk_code"></a><strong>Moectf的junk_code</strong></h1><p>首先根据题目提示可知，是一道花指令的题目：</p><p>拉入die中查询可知是win32位无壳程序</p><p>首先，shift+F12根据字符串找到主函数，F5进行反编译，如图：</p><p><img src="/post/64c44478/1.png" alt="image-20240124230736032"></p><p>根据伪代码可知，先让咱们输入一个36位的flag，然后根据3个条件进行判断，第一个if就是查询长度，第二个和第三个才是主要的：</p><p><img src="/post/64c44478/2.png" alt="image-20240124230913793"></p><p><img src="/post/64c44478/3.png" alt="image-20240124230924881"></p><p>两个函数都标红了，说明ida没有进行反编译出来，其中含有花指令</p><p>点击Tab键，进入汇编语言页面：</p><p><img src="/post/64c44478/4.png" alt="image-20240124231155621"></p><p>发现下面是一堆数据，可以知道此处花指令填充了大量的垃圾数据进行干扰反编译，所以将call指令的E8转换为NOP90即可，首先在call指令出点击U，将其重新识别为无定义，然后再修改E8位90</p><p><img src="/post/64c44478/5.png" alt="image-20240124231546715"></p><p>然后在004605D0处点击P，重新生成函数</p><p><img src="/post/64c44478/6.png" alt="image-20240124231652662"></p><p>下面的那一处也同样修改，修改完成后点击F5重新反编译</p><p><img src="/post/64c44478/7.png" alt="image-20240124231820576"></p><p><img src="/post/64c44478/8.png" alt="image-20240124231835962"></p><p>反编译完是这样两个函数，根据其代码重新将其逆回去，下面给出代码；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data1=[0x68, 0x6A, 0x60, 0x5E, 0x6F, 0x61, 0x76, 0x74, 0x2B, 0x70, </span><br><span class="line">  0x5A, 0x6D, 0x60, 0x68, 0x2B, 0x71, 0x2E, 0x5F]</span><br><span class="line">x=[i+5 for i in data1]</span><br><span class="line">enc1=&#x27;&#x27;</span><br><span class="line">for i in range(len(x)):</span><br><span class="line">    enc1+=chr(x[i])</span><br><span class="line"></span><br><span class="line">data2=[ 0x39, 0x12, 0x0E, 0x55, 0x39, 0x0C, 0x13, 0x08, 0x0D, 0x39, </span><br><span class="line">  0x05, 0x56, 0x02, 0x55, 0x47, 0x47, 0x47, 0x1B]</span><br><span class="line">enc2=&#x27;&#x27;</span><br><span class="line">for i in range(len(data2)):</span><br><span class="line">    enc2+=chr(data2[i]^0x66)</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">flag=enc1+enc2</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Blog</title>
      <link href="/post/cd01fd4c.html"/>
      <url>/post/cd01fd4c.html</url>
      
        <content type="html"><![CDATA[<p>​耗时三天，搭建了属于自己的博客，感谢硕神的指点与帮助（硕神yyds），在搭建的过程中，感觉到开发真的难，搞开发的都是大佬。</p>]]></content>
      
      
      
        <tags>
            
            <tag> “Blog 搭建” </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[网络空间安全专业 reverse小白]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间线</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>书籍</title>
      <link href="/books/index.html"/>
      <url>/books/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>首页</title>
      <link href="/home/index.html"/>
      <url>/home/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
