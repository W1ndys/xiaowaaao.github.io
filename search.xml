<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P1008 [NOIP1998 普及组] 三连击</title>
      <link href="/post/29077ec8.html"/>
      <url>/post/29077ec8.html</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP1998-普及组-三连击"><a href="#NOIP1998-普及组-三连击" class="headerlink" title="[NOIP1998 普及组] 三连击"></a>[NOIP1998 普及组] 三连击</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>本题为提交答案题，您可以写程序或手算在本机上算出答案后，直接提交答案文本，也可提交答案生成程序。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>将 $1, 2, \ldots , 9$ 共 $9$ 个数分成 $3$ 组，分别组成 $3$ 个三位数，且使这 $3$ 个三位数构成 $1 : 2 : 3$ 的比例，试求出所有满足条件的 $3$ 个三位数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>无</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>若干行，每行 $3$ 个数字。按照每行第 $1$ 个数字升序排列。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192 384 576</span><br><span class="line">* * *</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line">（剩余部分不予展示）</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>NOIP1998 普及组 第一题</p><p>解析：</p><p>1、首先可以判断第一个数值的范围，他肯定不会比123小，而且不会比999&#x2F;3&#x3D;333大</p><p>所以，可以确定第一个数字的范围</p><p>2、接着，筛选将九个数字全都包含的数字</p><p>题解：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">123</span>,<span class="number">999</span>):</span><br><span class="line">    i1=<span class="built_in">str</span>(i)</span><br><span class="line">    i2=<span class="built_in">str</span>(i*<span class="number">2</span>)</span><br><span class="line">    i3=<span class="built_in">str</span>(i*<span class="number">3</span>)</span><br><span class="line">    nums=&#123;i1[<span class="number">0</span>],i1[<span class="number">1</span>],i1[<span class="number">2</span>],i2[<span class="number">0</span>],i2[<span class="number">1</span>],i2[<span class="number">2</span>],i3[<span class="number">0</span>],i3[<span class="number">1</span>],i3[<span class="number">2</span>]&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">9</span> <span class="keyword">and</span> <span class="string">&#x27;0&#x27;</span><span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="built_in">print</span>(i,i*<span class="number">2</span>,i*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1004 [NOIP2000 提高组] 方格取数</title>
      <link href="/post/b3149039.html"/>
      <url>/post/b3149039.html</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2000-提高组-方格取数"><a href="#NOIP2000-提高组-方格取数" class="headerlink" title="[NOIP2000 提高组] 方格取数"></a>[NOIP2000 提高组] 方格取数</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>NOIP 2000 提高组 T4</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有 $N \times N$ 的方格图 $(N \le 9)$，我们将其中的某些方格中填入正整数，而其他的方格中则放入数字 $0$。如下图所示（见样例）:</p><p><img src="/../images/P1004-NOIP2000-%E6%8F%90%E9%AB%98%E7%BB%84-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0/0bpummja.png"></p><p>某人从图的左上角的 $A$ 点出发，可以向下行走，也可以向右走，直到到达右下角的 $B$ 点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字 $0$）。<br>此人从 $A$ 点到 $B$ 点共走两次，试找出 $2$ 条这样的路径，使得取得的数之和为最大。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行为一个整数 $N$（表示 $N \times N$ 的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的 $0$ 表示输入结束。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>只需输出一个整数，表示 $2$ 条路径上取得的最大的和。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">2 3 13</span><br><span class="line">2 6  6</span><br><span class="line">3 5  7</span><br><span class="line">4 4 14</span><br><span class="line">5 2 21</span><br><span class="line">5 6  4</span><br><span class="line">6 3 15</span><br><span class="line">7 2 14</span><br><span class="line">0 0  0</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">67</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>数据范围：$1\le N\le 9$。</p><h2 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h2><p>1、此题是考虑如何从一个点到另一个点的距离最大的问题，而且根据图形容易知道他的状态转移方程，就是到达目的坐标的左边一个或者上边一个</p><p>2、该题询问两次，就可以想象为有两个人都在同一个起点到达同一个终点，两者的路径不能一样，一个在左下一个在右上，所以可以抽象为四维数组。</p><h2 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h2><p>1、如何给这个四维数组赋值</p><p>2、如何写状态转移方程</p><p>解答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">res = <span class="built_in">list</span>([<span class="number">0</span>] *(n+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n +<span class="number">1</span>))</span><br><span class="line">dp = <span class="built_in">list</span>([[[<span class="number">0</span>] *(n+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    x, y, val = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(x) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">int</span>(y) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">int</span>(val) ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    res[<span class="built_in">int</span>(x)][<span class="built_in">int</span>(y)] = <span class="built_in">int</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                dp[i][j][k][m] = <span class="built_in">max</span>(<span class="built_in">max</span>(dp[i - <span class="number">1</span>][j][k - <span class="number">1</span>][m], dp[i - <span class="number">1</span>][j][k][m-<span class="number">1</span>]),<span class="built_in">max</span>(dp[i][j - <span class="number">1</span>][k - <span class="number">1</span>][m], dp[i][j - <span class="number">1</span>][k][m - <span class="number">1</span>])) + res[i][j] + res[k][m]</span><br><span class="line">                <span class="keyword">if</span> i == k <span class="keyword">and</span> j == m:</span><br><span class="line">                    dp[i][j][k][m] -= res[i][j]</span><br><span class="line"><span class="built_in">print</span>(dp[i][j][k][m])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码的难点是四个循环那个语句，前面的max是找到这四种组合怎样才能到达最大距离，目的是找到坐标点，从而为后面的res坐标系找到其赋值点，如果两人路径一样，就减掉一个，因为只能使用一次</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1003 [NOIP2011 提高组] 铺地毯</title>
      <link href="/post/66b467d3.html"/>
      <url>/post/66b467d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2011-提高组-铺地毯"><a href="#NOIP2011-提高组-铺地毯" class="headerlink" title="[NOIP2011 提高组] 铺地毯"></a>[NOIP2011 提高组] 铺地毯</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共 $n + 2$ 行。</p><p>第一行，一个整数 $n$，表示总共有 $n$ 张地毯。</p><p>接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。</p><p>第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $1$ 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 <code>-1</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【样例解释 1】</p><p>如下图，$1$ 号地毯用实线表示，$2$ 号地毯用虚线表示，$3$ 号用双实线表示，覆盖点 $(2,2)$ 的最上面一张地毯是 $3$ 号地毯。</p><p><img src="/../images/P1003-NOIP2011-%E6%8F%90%E9%AB%98%E7%BB%84-%E9%93%BA%E5%9C%B0%E6%AF%AF/q4izfzpb.png"></p><p>【数据范围】</p><p>对于 $30%$ 的数据，有 $n \le 2$。<br>对于 $50%$ 的数据，$0 \le a, b, g, k \le 100$。<br>对于 $100%$ 的数据，有 $0 \le n \le 10^4$, $0 \le a, b, g, k \le {10}^5$。   </p><p>noip2011 提高组 day1 第 $1$ 题。</p><p>题解：</p><p>思路：</p><p>1、此题就是简单的查看一块位置不断叠加的最后一层是什么，所以可以采用列表不断改变赋值的操作进行解决，列表可以修改，所以放在列表中进行操作</p><p>2、另外，观察到此题的取值范围很大，所以不能简单使用两层循环进行赋值的操作，可以使用<strong>倒序</strong>的思想，即从最后一层开始赋值，如果在块区域有，他就是这一层，然后递减</p><p>实例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">maps=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    maps.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())))</span><br><span class="line">x,y=(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> maps[n-<span class="number">1</span>][<span class="number">0</span>]&lt;=x&lt;=maps[n-<span class="number">1</span>][<span class="number">0</span>]+maps[n-<span class="number">1</span>][<span class="number">2</span>] <span class="keyword">and</span> maps[n-<span class="number">1</span>][<span class="number">1</span>]&lt;=y&lt;=maps[n-<span class="number">1</span>][<span class="number">1</span>]+maps[n-<span class="number">1</span>][<span class="number">3</span>]:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n-=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>语法注意：</p><p>1、一个易错点是二维列表的创建，要使用append函数进行追加</p><p>2、注意设置退出条件</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1002:[NOIP2002 普及组] 过河卒</title>
      <link href="/post/8815d79f.html"/>
      <url>/post/8815d79f.html</url>
      
        <content type="html"><![CDATA[<h1 id="P1000："><a href="#P1000：" class="headerlink" title="P1000："></a>P1000：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;                ********</span></span><br><span class="line"><span class="string">               ************</span></span><br><span class="line"><span class="string">               ####....#.</span></span><br><span class="line"><span class="string">             #..###.....##....</span></span><br><span class="line"><span class="string">             ###.......######              ###            ###</span></span><br><span class="line"><span class="string">                ...........               #...#          #...#</span></span><br><span class="line"><span class="string">               ##*#######                 #.#.#          #.#.#</span></span><br><span class="line"><span class="string">            ####*******######             #.#.#          #.#.#</span></span><br><span class="line"><span class="string">           ...#***.****.*###....          #...#          #...#</span></span><br><span class="line"><span class="string">           ....**********##.....           ###            ###</span></span><br><span class="line"><span class="string">           ....****    *****....</span></span><br><span class="line"><span class="string">             ####        ####</span></span><br><span class="line"><span class="string">           ######        ######</span></span><br><span class="line"><span class="string">##############################################################</span></span><br><span class="line"><span class="string">#...#......#.##...#......#.##...#......#.##------------------#</span></span><br><span class="line"><span class="string">###########################################------------------#</span></span><br><span class="line"><span class="string">#..#....#....##..#....#....##..#....#....#####################</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.....#......##.....#......##.....#......#    #----------#</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#</span></span><br><span class="line"><span class="string">##########################################    ############&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="P1001"><a href="#P1001" class="headerlink" title="P1001:"></a>P1001:</h1><p>求A+B的和：</p><p>重点：学会使用<strong>spilt（</strong>）函数进行分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b=input().split()</span><br><span class="line">a=int(a)</span><br><span class="line">b=int(b)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><h1 id="P1002-NOIP2002-普及组-过河卒"><a href="#P1002-NOIP2002-普及组-过河卒" class="headerlink" title="P1002:[NOIP2002 普及组] 过河卒"></a>P1002:[NOIP2002 普及组] 过河卒</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p><p><img src="/../images/P1002-NOIP2002-%E6%99%AE%E5%8F%8A%E7%BB%84-%E8%BF%87%E6%B2%B3%E5%8D%92/ipmwl52i.png"></p><p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 6 3 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第四题</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>1、解析：</p><p>此题可以使用递推来解决，因为这个题可以得到递推公式，就是求到此点的路径，就是到此点的左侧和上侧的值相加</p><p>2：答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">maps=[[<span class="number">1</span>]*<span class="number">25</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">move=[[<span class="number">0</span>]*<span class="number">25</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line">n,m,x,y=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">maps[x-<span class="number">1</span>][y-<span class="number">2</span>]=<span class="number">0</span></span><br><span class="line">maps[x-<span class="number">1</span>][y+<span class="number">2</span>]=<span class="number">0</span></span><br><span class="line">maps[x+<span class="number">1</span>][y-<span class="number">2</span>]=<span class="number">0</span></span><br><span class="line">maps[x+<span class="number">1</span>][y+<span class="number">2</span>]=<span class="number">0</span></span><br><span class="line">maps[x-<span class="number">2</span>][y-<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">maps[x-<span class="number">2</span>][y+<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">maps[x+<span class="number">2</span>][y-<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">maps[x+<span class="number">2</span>][y+<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line">maps[x][y]=<span class="number">0</span></span><br><span class="line">maps[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">move[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> maps[i][j]==<span class="number">1</span>:</span><br><span class="line">            move[i][j]=move[i-<span class="number">1</span>][j]+move[i][j-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(move[n][m])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、反思：</p><p>此题的难度在于建立两个参考坐标以及二维数组的建立</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Android Studio超时问题报错</title>
      <link href="/post/c6dc6224.html"/>
      <url>/post/c6dc6224.html</url>
      
        <content type="html"><![CDATA[<p>解决Android Studio连接超时的报错问题：</p><p>错误展示：</p><p>read timed out</p><p>解决：</p><p> 首先，要明白这个错误的重要原因是因为gradle的问题，因为是海外包框架，所以国内访问会很慢，从而导致访问超时，因此我们可以采用本地访问的方式将其解决。</p><p>1、查看gradle的版本，在<a href="https://services.gradle.org/distributions/">Gradle Distributions</a></p><p>[<a href="https://services.gradle.org/distributions/]">https://services.gradle.org/distributions/]</a>: </p><p>下载对应的版本，然后将其解压到C:\Users\（用户名）.gradle\wrapper\dists的目录下，</p><p>查看版本：</p><p><img src="/../images/%E8%A7%A3%E5%86%B3Android-Studio%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8A%A5%E9%94%99/image-20240204170214357.png" alt="image-20240204170214357"></p><p>2、然后在内部进行配置：</p><p>点击File—&gt;seetings:</p><p><img src="/../images/%E8%A7%A3%E5%86%B3Android-Studio%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8A%A5%E9%94%99/image-20240204170344612.png" alt="image-20240204170344612"></p><p>然后就可以进行正常访问</p>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/post/fbaff1b6.html"/>
      <url>/post/fbaff1b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><h2 id="1、变量与字符串："><a href="#1、变量与字符串：" class="headerlink" title="1、变量与字符串："></a>1、变量与字符串：</h2><p><strong>命名规则</strong>：可以使用字母数字及下划线，但是不能以数字开头，python3已支持中文命名</p><p><strong>字符串</strong>：可以使用’ ’“ “’‘’ ‘’‘三种类型转义字符，在引号前面加&#x2F; 进行转义，或者使用固定的 &#x2F;n 等等</p><p><strong>原生字符</strong>，可以在引号前加 r 代表不使用转义字符意思<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122214409117-1706978659594-2.png" alt="image-20240122214409117"></p><h2 id="2、导入模块及模块介绍："><a href="#2、导入模块及模块介绍：" class="headerlink" title="2、导入模块及模块介绍："></a>2、导入模块及模块介绍：</h2><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">​random.randint (a,b)<span class="comment">#就是生成一个在a到b范围的整数</span></span><br></pre></td></tr></table></figure><p>​<strong>伪随机数攻击：</strong></p><p>​随机数的生成是有种子生成，而大多数的种子是当前系统的时间当做种子数，因此可以通过获取这个种子来进行伪随机数攻击，使用random.getstate()函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=random.getstate()  <span class="comment">#获取当前的种子状态</span></span><br><span class="line"></span><br><span class="line">​random.setstate(x)    <span class="comment">#将种子数重现</span></span><br><span class="line"></span><br><span class="line">​random.randint(a,b)<span class="comment">#进行伪随机数攻击</span></span><br></pre></td></tr></table></figure><h2 id="3、数字类型"><a href="#3、数字类型" class="headerlink" title="3、数字类型"></a>3、数字类型</h2><p>​数字类型有整形，浮点型，在python中，对于浮点型·的计算有时候会产生误差，比如在python中，<strong>0.3 &lt; 0.1 + 0.2</strong>  这在比较中就会产生误差，因此要进行规避，使用函数进行精确计算，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"></span><br><span class="line">​a = decimal.Decimal(<span class="string">&#x27;0.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​b = decimal.Decimal(<span class="string">&#x27;0.2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​<span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><pre><code>   还有复数，例如：</code></pre><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> x = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line"></span><br><span class="line">​x.real<span class="comment">#获取这个复数的实部</span></span><br><span class="line"></span><br><span class="line">​x.imag<span class="comment">#获取这个复数的虚部</span></span><br></pre></td></tr></table></figure><h2 id="4、数字的运算"><a href="#4、数字的运算" class="headerlink" title="4、数字的运算"></a>4、数字的运算</h2><p>​<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122222207694-1706978659594-1.png" alt="image-20240122222207694"></p><h2 id="5、逻辑运算符："><a href="#5、逻辑运算符：" class="headerlink" title="5、逻辑运算符："></a>5、逻辑运算符：</h2><p>​and        or        not    结果是影响运算的数据</p><p>​    3  and 4   &#x3D;&#x3D;&#x3D;》   4</p><p>​    3  or  4   &#x3D;&#x3D;&#x3D;&#x3D;》 3</p><p>​    0  and 3  &#x3D;&#x3D;&#x3D;&#x3D;》0</p><p><strong>优先级</strong>：越往下，优先级越高</p><p>​<img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240122224450420-1706978659594-4.png" alt="image-20240122224450420"></p><h2 id="6、分支与循环："><a href="#6、分支与循环：" class="headerlink" title="6、分支与循环："></a>6、分支与循环：</h2><p>​<strong>分支：</strong></p><p>​<strong>if   if …else   if … elif    if … elif  ….else</strong></p><p>​<strong>循环：</strong></p><p>​<strong>whilefor</strong></p><p>​<strong>continue</strong>    与<strong>break</strong>的区别：</p><p>​     continue是跳出本次循环的结果，不执行这次的运行，回到循环体的开头进行下一次循环；</p><p>​ break则是直接跳出循环体，不再执行循环结构，循环结束。</p><p>​但是两者只能作用于<strong>一层循环体</strong></p><p>​while   与    else  的配合,例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">day = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> day &lt;=<span class="number">7</span> :</span><br><span class="line"></span><br><span class="line">​answer = <span class="built_in">input</span>(<span class="string">&quot;今天你有好好学习吗？&quot;</span>)</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span> answer != <span class="string">&quot;yes&quot;</span> :</span><br><span class="line"></span><br><span class="line">​**<span class="keyword">break</span>**</span><br><span class="line"></span><br><span class="line">​day+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">​**<span class="keyword">else</span>:**</span><br><span class="line"></span><br><span class="line">​<span class="built_in">print</span>(<span class="string">&quot;very good！&quot;</span>)</span><br></pre></td></tr></table></figure><p>​for循环的使用：</p><p>​for变量in可迭代对象：</p><p>​通常与之配合的，range() 函数，比如：</p><p>​range(stop)range(start,stop)range(start,stop,step)</p><p>​或者是一个字符串</p><p>​for each in “XiaoWaaa”:</p><p>​print(each)</p><h2 id="7、存储类型："><a href="#7、存储类型：" class="headerlink" title="7、存储类型："></a>7、存储类型：</h2><h3 id="1、列表："><a href="#1、列表：" class="headerlink" title="1、列表："></a>1、列表：</h3><p>​列表可以容纳多种类型的数据，相邻数据之间使用，分隔，并且用[]进行包含，例如： [1,2,3,4,5] [1,2,3,4,”字符串”]这两个都是列表；</p><h4 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h4><p>​列表的重要功能，可以一次取出多个列表中的数据值，写作方式： **list[开始索引:结束索引:step]**，如要倒序输出，则可以[::-1]</p><h4 id="增加："><a href="#增加：" class="headerlink" title="增加："></a>增加：</h4><p>​列表如果要增加元素，可以通过<strong>append()<strong>方法进行追加,但是append()方法一次只能</strong>添加一个元素</strong>，例如： list.append(5)</p><p>​如果要一次追加多个元素们可以使用<strong>extend()<strong>方法，可以一次追加一个</strong>可迭代对象</strong>，例如： list.extend([7,8,9])</p><p>​如果在任意位置进行添加数据，则可以使用insert()方法，具体使用：</p><p>list.insert(要插入的位置索引，要插入的元素)</p><p>list.insert(1,2)</p><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><p>​列表如果要删除元素，可以使用remove()方法，删除指定的元素，比如删除列表中的5，则可以使用list.remove(5)，如果元素不存在，责护报错</p><p>​如果要删除指定位置的元素，则可以使用pop方法，具体使用如下：list.pop(3),删除索引值为3的元素</p><p>​如果要清空列表的值，则可以使用clear()方法，具体使用如下：list.clear()</p><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><p>​列表如果要修改元素的值，可以使用下表索引的方法进行修改，比如list[2]&#x3D;5,就将列表第三个元素修改为5</p><p>​列表如果要一次修改多个元素的值，可以使用分片的方法进行修改，比如list[3:]&#x3D;[4,5,6],就是将第四个元素之后的全部元素替换成4 5 6</p><p>​列表修改的其他功能还有<strong>排序</strong>功能，可以使用<strong>sort()<strong>方法进行排序，使用方法：list.sort(),进行升序排序，降序方法可以在sort方法中进行插入值，如</strong>list.sort(reverse&#x3D;True)</strong>,*<em>逆序的功能使用</em>***reverse()**方法进行，如list.reverse();</p><h4 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h4><p>​查找元素<strong>出现的次数</strong>：**count()**方法，例如list.count(3),查找元素中3出现的次数</p><p>​查找元素的<strong>下标值</strong>，使用<strong>index()<strong>方法。例如，list.index(2),查找元素为2的第一次出现的下标索引值，同时，index方法还有一些参数可以添加，比如：</strong>index(元素，start，stop)</strong></p><p>​<strong>复制列表</strong>，使用**copy()**方法，list_copy&#x3D;list.copy()，将list列表复制到list_copy中</p><h4 id="二维列表："><a href="#二维列表：" class="headerlink" title="二维列表："></a>二维列表：</h4><p>​<strong>访问</strong>二维列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">        [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix :</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(j)</span><br><span class="line"><span class="built_in">print</span>(matrix[<span class="number">2</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​<strong>创建</strong>：</p><p>​正确的创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A =[<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    A[i]=[<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​错误的创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = [[<span class="number">0</span>]*<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line">B[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(B)</span><br></pre></td></tr></table></figure><p>使用错误的创建，会导致修改一处数据使得全部的数据都会被修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>​可以使用    <strong>is</strong>    运算符检测是不是数据相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(B[<span class="number">1</span>] <span class="keyword">is</span> B[<span class="number">2</span>])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x= <span class="string">&quot;XiaoWaaa&quot;</span></span><br><span class="line">y=<span class="string">&quot;XiaoWaaa&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x <span class="keyword">is</span> y)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>所以两者的指向是相同的，就相当于x 与 y 都是指向一个地址，夙愿修改一处就相当于把地址处的数据进行修改，所以修改数据会同时修改，所以如果要只修改一处代码，就该进行深拷贝，这就用到copy模块中的deepcopy () 函数，其中copy函数是浅拷贝，效率更高，但是浅拷贝完是一体的，所以就使用deepcopy函数。</p><p>deepcopy函数的图示：</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240124120309508-1706978659594-3.png" alt="image-20240124120309508"></p><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">y=copy.deepcopy(x)</span><br><span class="line">y[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">列表x的数据： [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">列表y的数据： [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><h4 id="列表推导式："><a href="#列表推导式：" class="headerlink" title="列表推导式："></a>列表推导式：</h4><p>结构形式：</p><p>​[<em><strong>要进行的操作</strong></em><em>fortargetin可迭代对象</em>]（基础形式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(y)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>​[循环体fortargetin可迭代对象<strong>ifcondition</strong>]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">word =[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;ABC&#x27;</span>,<span class="string">&#x27;HAHAHA&#x27;</span>]</span><br><span class="line">y=[i <span class="keyword">for</span> i <span class="keyword">in</span> word <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">nums=[[x,y] <span class="keyword">for</span> x <span class="keyword">in</span> nums <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">for</span> y <span class="keyword">in</span> nums <span class="keyword">if</span> y %<span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line">结果：</span><br><span class="line">[<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>]</span><br><span class="line">[[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">9</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">6</span>], [<span class="number">4</span>, <span class="number">9</span>], [<span class="number">6</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">6</span>], [<span class="number">6</span>, <span class="number">9</span>], [<span class="number">8</span>, <span class="number">3</span>], [<span class="number">8</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">3</span>], [<span class="number">10</span>, <span class="number">6</span>], [<span class="number">10</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><h3 id="2、元组："><a href="#2、元组：" class="headerlink" title="2、元组："></a>2、元组：</h3><p>​元组使用()表示，是一个不可修改的类型，同时元组里面也可以存在多种类型的数据，如： (1,,2,3,[4,5,6],‘XiaoWaaa’),只有元组里面有可修改的类型，如列表，那么才可以进行修改；</p><p>​元组的查找，和列表相同，支持count和index查找；</p><p>​元组的<strong>打包和解包</strong>：(任何类型都一样)</p><p>​将多个元素放在一起叫做打包，将数据分别分给其他变量叫做解包如：</p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x,y,z=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="3、字符串："><a href="#3、字符串：" class="headerlink" title="3、字符串："></a>3、字符串：</h3><p>不可变类型</p><h4 id="大小写字母变换："><a href="#大小写字母变换：" class="headerlink" title="大小写字母变换："></a>大小写字母变换：</h4><p>1、capitalize</p><p>作用是将字符串的首字母大写，其他变成小写，如下;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;I love XiaoWaaa&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.capitalize()</span><br><span class="line"><span class="string">&#x27;I love xiaowaaa&#x27;</span></span><br></pre></td></tr></table></figure><p>2、casefold</p><p>作用是将字符串的所有字母变成小写，但是casefold的处理范围不局限于英语，德语也可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> x.casefold()</span><br><span class="line"><span class="string">&#x27;i love xiaowaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>3、title</p><p>作用是将字符串的所有字母的首字母变成大写，剩余字符全部变成小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.title()</span><br><span class="line"><span class="string">&#x27;I Love Xiaowaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>4、swapcase</p><p>作用是将字符串的所有字母进行大小写转换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.swapcase()</span><br><span class="line"><span class="string">&#x27;i LOVE xIAOwAAA&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>5、upper</p><p>作用是将所有的字母变成大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.upper()</span><br><span class="line"><span class="string">&#x27;I LOVE XIAOWAAA&#x27;</span></span><br></pre></td></tr></table></figure><p>6、lower</p><p>作用是将所有的字符转换为小写，局限于英语字母变小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.lower()</span><br><span class="line"><span class="string">&#x27;i love xiaowaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="左中右对齐："><a href="#左中右对齐：" class="headerlink" title="左中右对齐："></a>左中右对齐：</h4><p>1、居中对齐center</p><p>格式：center(width,fillchar&#x3D;’’)</p><p>后面那个参数是用什么填充，默认是空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&quot;学不会，就别学！&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.center(<span class="number">15</span>)</span><br><span class="line"><span class="string">&#x27;    学不会，就别学！   &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.center(<span class="number">15</span>, <span class="string">&quot;哈&quot;</span>)</span><br><span class="line"><span class="string">&#x27;哈哈哈哈学不会，就别学！哈哈哈&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>2、左对齐ljust</p><p>格式：ljust(width,fillchar&#x3D;’’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.ljust(<span class="number">15</span>)</span><br><span class="line"><span class="string">&#x27;学不会，就别学！       &#x27;</span></span><br></pre></td></tr></table></figure><p>3、右对齐rjust</p><p>格式：rjust(width,fillchar&#x3D;’’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.rjust(<span class="number">15</span>)</span><br><span class="line"><span class="string">&#x27;       学不会，就别学！&#x27;</span></span><br></pre></td></tr></table></figure><p>4、zfill</p><p>格式 zfill(width),一般是做报表进行格式统一的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;520&quot;</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;00520&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;-521&quot;</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;-0521&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.zfill(<span class="number">15</span>)</span><br><span class="line"><span class="string">&#x27;0000000学不会，就别学！&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="查找：-1"><a href="#查找：-1" class="headerlink" title="查找："></a>查找：</h4><p>1、count</p><p>格式：count(查找的字符串，起始位置，末位置)</p><p>作用是查找字符出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&quot;上海自来水来自海上&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.count(<span class="string">&quot;海&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.count(<span class="string">&quot;海&quot;</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>2、find方法</p><p>格式：find（查找的字符串，起始位置，末位置）</p><p>作用：查找字符出现的下边，如果查询不到要查询的字符便会输出-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.find(<span class="string">&quot;海&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>3、rfind方法</p><p>格式：find（查找的字符串，起始位置，末位置）</p><p>作用是：从右往左查找下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.rfind(<span class="string">&quot;海&quot;</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>4、index方法</p><p>作用和find方法一样，但是如果查询不到要查询的字符，便会抛出异常</p><h4 id="替换："><a href="#替换：" class="headerlink" title="替换："></a>替换：</h4><p>1、expandtabs(nums)</p><p>将tab转换为空格，实现统一,参数是指将tab键转换为几个空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;hahaha&quot;)</span></span><br><span class="line"><span class="string">    print(&quot;hhhh&quot;)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_code = code.expandtabs(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_code)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hahaha&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hhhh&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>2、replace(old，new)</p><p>是指将old转换为new的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;学好计算机，进场当保安&quot;</span>.replace(<span class="string">&quot;计算机&quot;</span>,<span class="string">&quot;网安&quot;</span>)</span><br><span class="line"><span class="string">&#x27;学好网安，进场当保安&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>3、translate()</p><p>首先使用str.maketrans()作为转换法则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table=<span class="built_in">str</span>.maketrans(<span class="string">&quot;ABCDEFG&quot;</span>,<span class="string">&quot;1234567&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;ABCDE,上山打老虎&quot;</span>.translate(table)</span><br><span class="line"><span class="string">&#x27;12345,上山打老虎&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;ABCDE,上山打老虎&quot;</span>.translate(<span class="built_in">str</span>.maketrans(<span class="string">&quot;ABCDEFG&quot;</span>,<span class="string">&quot;1234567&quot;</span>))</span><br><span class="line"><span class="string">&#x27;12345,上山打老虎&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;ABCDE,上山打老虎&quot;</span>.translate(<span class="built_in">str</span>.maketrans(<span class="string">&quot;ABCDEFG&quot;</span>,<span class="string">&quot;1234567&quot;</span>,<span class="string">&quot;老虎&quot;</span>))</span><br><span class="line"><span class="string">&#x27;12345,上山打&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="去除："><a href="#去除：" class="headerlink" title="去除："></a>去除：</h4><p>1、lstrip()和rstrip()：去除括号内的<strong>指定字符</strong></p><p>2、removeprefix()和removesuffix()：去除口号内的<strong>指定字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;    左侧不要留白&quot;</span>.lstrip()</span><br><span class="line"><span class="string">&#x27;左侧不要留白&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;右侧不要留白    &quot;</span>.rstrip()</span><br><span class="line"><span class="string">&#x27;右侧不要留白&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;    左右不要留白    &quot;</span>.strip()</span><br><span class="line"><span class="string">&#x27;左右不要留白&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.lstrip(<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="string">&#x27;.xiaowaaa.asia&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.lstrip(<span class="string">&quot;wasia.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;xiaowaaa.asia&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.rstrip(<span class="string">&quot;wasia.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;www.xiao&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.strip(<span class="string">&quot;wasia.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;xiao&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.removeprefix(<span class="string">&quot;www.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;xiaowaaa.asia&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.removesuffix(<span class="string">&quot;.asia&quot;</span>)</span><br><span class="line"><span class="string">&#x27;www.xiaowaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="拆分："><a href="#拆分：" class="headerlink" title="拆分："></a>拆分：</h4><p>partition()和rpartition()和split()和rsplit()和splitlines()</p><p>前两者是生成一个字符串，后二者是生成一个列表,最后是根据换行符\n    \r   进行拆分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.partition(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;xiaowaaa.asia&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;www.xiaowaaa.asia&quot;</span>.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;xiaowaaa&#x27;</span>, <span class="string">&#x27;asia&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="拼接："><a href="#拼接：" class="headerlink" title="拼接："></a>拼接：</h4><p>join()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;.&quot;</span>.join((<span class="string">&quot;www&quot;</span>,<span class="string">&quot;xiaowaaa&quot;</span>,<span class="string">&quot;asia&quot;</span>))</span><br><span class="line"><span class="string">&#x27;www.xiaowaaa.asia&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="格式化字符串："><a href="#格式化字符串：" class="headerlink" title="格式化字符串："></a>格式化字符串：</h4><p>format()作用就是先给变量占个位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我的博客搭建于&#123;&#125;年&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;2024&quot;</span>)</span><br><span class="line"><span class="string">&#x27;我的博客搭建于2024年&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;1+2=&#123;&#125;,2的平方是&#123;&#125;,3的立方是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>+<span class="number">2</span>,<span class="number">2</span>*<span class="number">2</span>,<span class="number">3</span>*<span class="number">3</span>*<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;1+2=3,2的平方是4,3的立方是27&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;嘻&quot;</span>,<span class="string">&quot;哈&quot;</span>) <span class="comment">#此处是使用元组的顺序决定先后</span></span><br><span class="line"><span class="string">&#x27;嘻嘻哈哈&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#使用关键字进行格式化，不用顾忌顺序问题</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我叫&#123;name&#125;,我爱&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;python&quot;</span>,name=<span class="string">&quot;XiaoW&quot;</span>)</span><br><span class="line"><span class="string">&#x27;我叫XiaoW,我爱python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#表示中间使用什么进行分割</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:+&#125;&#123;:-&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">520</span>,-<span class="number">520</span>)</span><br><span class="line"><span class="string">&#x27;+520-520&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234</span>)</span><br><span class="line"><span class="string">&#x27;1,234&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#表示精确到多少位</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415956</span>)</span><br><span class="line"><span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:.2g&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415</span>)</span><br><span class="line"><span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:.2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.141</span>)</span><br><span class="line"><span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#表示以什么格式输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:.b&#125;&quot;</span>,<span class="built_in">format</span>(<span class="number">80</span>)</span><br><span class="line">(<span class="string">&#x27;&#123;:.b&#125;&#x27;</span>, <span class="string">&#x27;80&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;1010000&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:c&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:o&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;120&#x27;</span></span><br><span class="line"><span class="comment">#使用#在前面表示在数字前面加上标识符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">80</span>)</span><br><span class="line"><span class="string">&#x27;0x50&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">0.96</span>)</span><br><span class="line"><span class="string">&#x27;96.000000%&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">0.96</span>)</span><br><span class="line"><span class="string">&#x27;96.00%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240203232531265.png" alt="image-20240203232531265"></p><p><strong>F-string</strong>：</p><p>在字符前加上f或者F便可以省略format函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>year=<span class="number">2024</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;我的博客搭建于<span class="subst">&#123;year&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;我的博客搭建于2024&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;3.1415926:.2f&quot;</span></span><br><span class="line"><span class="string">&#x27;3.1415926:.2f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;<span class="number">3.1415926</span>:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;<span class="number">123456789</span>:,&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;123,456,789&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h3><p>是列表元组和字符串的总称</p><p>1、is 检测序列的id值是否相同，id相当于C语言的地址</p><p>2、in 检测是否有包含关系</p><p>3、del 删除的作用，类似于切片和clear，但是del是彻底删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#55&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    x</span><br><span class="line">NameError: name <span class="string">&#x27;x&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> y[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>4、转换：list tuple str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>((<span class="string">&quot;www&quot;</span>,<span class="string">&quot;xiaowaaa&quot;</span>,<span class="string">&quot;asia&quot;</span>))</span><br><span class="line">[<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;xiaowaaa&#x27;</span>, <span class="string">&#x27;asia&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(<span class="string">&quot;www.xiaowaaa.asia&quot;</span>)</span><br><span class="line">(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="string">&#x27;[1, 2, 3, 4]&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>5、比大小，min与max</p><p>6、len和sum</p><p>7、排序：sorted和reversed</p><p>用法一致，但他们与sort有着区别</p><p>sorted函数是不改变原来的列表，但是sort改变原来列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(x)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>reversed返回的是一个反向迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">reversed</span>(x)</span><br><span class="line">&lt;list_reverseiterator <span class="built_in">object</span> at <span class="number">0x00000194AFFED190</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">reversed</span>(x))</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>8、all和any</p><p>all判断可迭代对象元素是不是都为真，any判断是不是存在元素为真的元素</p><p>9、enumerate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seasons=[<span class="string">&quot;Spring&quot;</span>,<span class="string">&quot;Summer&quot;</span>,<span class="string">&quot;Fall&quot;</span>,<span class="string">&quot;Winter&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">enumerate</span>(seasons)</span><br><span class="line">&lt;<span class="built_in">enumerate</span> <span class="built_in">object</span> at <span class="number">0x00000194AFCBEC40</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons,<span class="number">100</span>))</span><br><span class="line">[(<span class="number">100</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">101</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">102</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">103</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>10、zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped=<span class="built_in">zip</span>(x,y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(zipped)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z=<span class="string">&quot;xiaow&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(x,y,z))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="string">&#x27;i&#x27;</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>)]</span><br><span class="line"><span class="comment">#会舍弃较长的元素，如果不想要舍弃，则需要使用itertools的zip_longest函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped=itertools.zip_longest(x,y,z)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(zipped)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="string">&#x27;i&#x27;</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="literal">None</span>, <span class="literal">None</span>, <span class="string">&#x27;o&#x27;</span>), (<span class="literal">None</span>, <span class="literal">None</span>, <span class="string">&#x27;w&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>11、map（函数，可迭代对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mapped=<span class="built_in">map</span>(<span class="built_in">ord</span>,<span class="string">&quot;XiaoW&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(mapped)</span><br><span class="line">[<span class="number">88</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">111</span>, <span class="number">87</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mapped=<span class="built_in">map</span>(<span class="built_in">pow</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(mapped)</span><br><span class="line">[<span class="number">4</span>, <span class="number">9</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment">#就相当于</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">2</span>),<span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">2</span>),<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">2</span>)]</span><br><span class="line">[<span class="number">4</span>, <span class="number">9</span>, <span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>12、filter（判断函数，可迭代对象）</p><p>作用是将判断正确的函数的值输出出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.islower,<span class="string">&quot;XiaoW&quot;</span>))</span><br><span class="line">[<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>13、iter将可迭代对象转换为迭代器，迭代器只能使用一次，可迭代对象可以使用多次</p><p>next是每次提取一个迭代器中的值，最后提取完便会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=<span class="built_in">iter</span>(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(x)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(y)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list_iterator&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(y)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(y)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(y)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(y)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(y)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#108&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">next</span>(y)</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="4、字典："><a href="#4、字典：" class="headerlink" title="4、字典："></a>4、字典：</h3><p>格式：{键：值}</p><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><p>六种创建字典的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="string">&quot;吕布&quot;</span>:<span class="string">&quot;口口布&quot;</span>,<span class="string">&quot;关羽&quot;</span>:<span class="string">&quot;关习习&quot;</span>,<span class="string">&quot;刘备&quot;</span>:<span class="string">&quot;刘Baby&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="built_in">dict</span>(吕布=<span class="string">&quot;口口布&quot;</span>,关羽=<span class="string">&quot;关习习&quot;</span>,刘备=<span class="string">&quot;刘Baby&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="built_in">dict</span>([(<span class="string">&quot;吕布&quot;</span>,<span class="string">&quot;口口布&quot;</span>),(<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;关习习&quot;</span>),(<span class="string">&quot;刘备&quot;</span>,<span class="string">&quot;刘Baby&quot;</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=<span class="built_in">dict</span>(a=&#123;<span class="string">&quot;吕布&quot;</span>:<span class="string">&quot;口口布&quot;</span>,<span class="string">&quot;关羽&quot;</span>:<span class="string">&quot;关习习&quot;</span>,<span class="string">&quot;刘备&quot;</span>:<span class="string">&quot;刘Baby&quot;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=<span class="built_in">dict</span>(&#123;<span class="string">&quot;吕布&quot;</span>:<span class="string">&quot;口口布&quot;</span>,<span class="string">&quot;关羽&quot;</span>:<span class="string">&quot;关习习&quot;</span>&#125;,刘备=<span class="string">&quot;刘Baby&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=<span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;吕布&quot;</span>,<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;刘备&quot;</span>],[<span class="string">&quot;口口布&quot;</span>,<span class="string">&quot;关习习&quot;</span>,<span class="string">&quot;刘Baby&quot;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快速创建一种值相同的字典：</p><h4 id="增删改查："><a href="#增删改查：" class="headerlink" title="增删改查："></a>增删改查：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=<span class="built_in">dict</span>.fromkeys(<span class="string">&quot;XiaoW&quot;</span>,<span class="number">520</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&#123;<span class="string">&#x27;X&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">520</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#修改键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g[<span class="string">&#x27;X&#x27;</span>]=<span class="number">52</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&#123;<span class="string">&#x27;X&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">520</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#删除，如果找不到就抛出异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.pop(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="number">52</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">520</span>&#125;</span><br></pre></td></tr></table></figure><p>setdefault函数作用是查找是否有这个键值对，如果没有就加入键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.setdefault(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;code&quot;</span>)</span><br><span class="line"><span class="string">&#x27;code&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;<span class="string">&#x27;X&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;code&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="关键函数："><a href="#关键函数：" class="headerlink" title="关键函数："></a>关键函数：</h4><p>itemskeysvalues</p><p>分别是显示字典键值对字典的键字典的值</p><p>字典有存在浅拷贝，即copy函数</p><p>in和not  in 函数</p><p>判断是否在字典中</p><h4 id="嵌套字典："><a href="#嵌套字典：" class="headerlink" title="嵌套字典："></a>嵌套字典：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=&#123;<span class="string">&quot;小明&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">50</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">80</span>&#125;,<span class="string">&quot;小红&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">60</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">70</span>&#125;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="string">&quot;小明&quot;</span>][<span class="string">&quot;语文&quot;</span>]</span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="字典推导式："><a href="#字典推导式：" class="headerlink" title="字典推导式："></a>字典推导式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g=&#123;<span class="string">&#x27;X&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">66</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">77</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> g&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> g.items() <span class="keyword">if</span> v&lt;<span class="number">100</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&#123;<span class="number">52</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">88</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">66</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">77</span>: <span class="string">&#x27;W&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="5、集合"><a href="#5、集合" class="headerlink" title="5、集合"></a>5、集合</h3><p>集合中所有的元素都是唯一且无序的</p><h4 id="构造："><a href="#构造：" class="headerlink" title="构造："></a>构造：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、直接构造</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>&#125;</span><br><span class="line"><span class="number">2</span>、使用集合推导式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;m <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&quot;ABCDEF&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;</span><br><span class="line"><span class="number">3</span>、使用<span class="built_in">set</span>函数</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">set</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的操作："><a href="#集合的操作：" class="headerlink" title="集合的操作："></a>集合的操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.union(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)<span class="comment">#集合的并集</span></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.intersection(<span class="string">&quot;ABC&quot;</span>)<span class="comment">#集合的交集</span></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.difference(<span class="string">&quot;ABC&quot;</span>)<span class="comment">#集合的差集</span></span><br><span class="line">&#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.intersection(<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;AD&quot;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.intersection(<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>集合的姐妹：</p><p>frozenset（）与set（）</p><p>其中，set方法是可以进行增加和删除的，但是frozenset方法是不可变的</p><h4 id="增删改查：-1"><a href="#增删改查：-1" class="headerlink" title="增删改查："></a>增删改查：</h4><p>下面的操作都改变了集合的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> s=<span class="built_in">set</span>(<span class="string">&quot;XiaoW&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;W&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update([<span class="number">1</span>,<span class="number">1</span>],<span class="string">&quot;23&quot;</span>)<span class="comment">#次数添加元素会按照每一个字符进行添加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;W&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.intersection_update(<span class="string">&quot;xiaow&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.difference_update(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.symmetric_difference_update(<span class="string">&quot;hhhao&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="string">&quot;56&quot;</span>)<span class="comment">#此处的添加，会将整个字符串进行添加进去</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;56&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&quot;56&quot;</span>)<span class="comment">#remove的删除，如果找不到删除对象就会抛出异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.discard(<span class="string">&quot;hhh&quot;</span>)<span class="comment">#discard的删除，如果找不到就什么也不处理</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.pop()<span class="comment">#pop函数，每次都会随机弹出一个值</span></span><br><span class="line"><span class="string">&#x27;h&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.clear()<span class="comment">#clear函数，会清空集合元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p><strong>只有不可变的迭代对象才能作为集合和字典的键的元素</strong></p><h2 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h2><p>函数使用def函数名（） 的格式</p><h3 id="参数设置："><a href="#参数设置：" class="headerlink" title="参数设置："></a>参数设置：</h3><p>​1、默认参数应该放在后面；</p><p>​2、参数可以通过关键词参数和位置参数进行；</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">x,y,z</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join((x,y,z))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z=<span class="string">&quot;wo&quot;</span>,<span class="string">&quot;hhh&quot;</span>,<span class="string">&quot;you&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfunc(x,y,z)</span><br><span class="line"><span class="string">&#x27;wohhhyou&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>​3、可以通过使用&#x2F;*表示是否强制使用关键词参数：</p><p>​    *后面是必须强制使用关键词参数</p><p>​    &#x2F;前面必须强制使用位置参数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">myfunc3</span>(<span class="params">a,*,b,c</span>):</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfunc3(<span class="number">5</span>,b=<span class="number">1</span>,c=<span class="number">2</span>)</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfunc3(<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#32&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    myfunc3(<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">TypeError: myfunc3() takes <span class="number">1</span> positional argument but <span class="number">3</span> were given</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">myfunc4</span>(<span class="params">a,/,b,c</span>):</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfunc4(<span class="number">5</span>,b=<span class="number">1</span>,c=<span class="number">2</span>)</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>​4、收集参数，如果不确定参数的数量时使用，通过在参数前面加*表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">myfunc2</span>(<span class="params">*args</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;有&#123;&#125;个参数&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(args)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个参数是&#123;&#125;：&quot;</span>.<span class="built_in">format</span>(args[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfunc2(<span class="string">&quot;hhh&quot;</span>,<span class="string">&quot;hahaha&quot;</span>,<span class="string">&quot;xixixi&quot;</span>)</span><br><span class="line">有<span class="number">3</span>个参数</span><br><span class="line">第二个参数是hahaha：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>​5、一个*号得到的是元组，使用两个**号得到字典：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def myfunc(a,*b,**c):</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; myfunc(1,2,3,4,x=5,y=6)</span><br><span class="line">1 (2, 3, 4) &#123;&#x27;x&#x27;: 5, &#x27;y&#x27;: 6&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h3><p>1、global可以将使局部变量变为全局变量</p><p>2、nonlocal可以使局部变量覆盖全局变量</p><h3 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h3><p>对于嵌套函数，如果return 函数，则可以在外部引用嵌套函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一层函数：&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这是第二层函数：&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun=outer()</span><br><span class="line">第一层函数：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun()</span><br><span class="line">这是第二层函数：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="装饰器："><a href="#装饰器：" class="headerlink" title="装饰器："></a>装饰器：</h3><p>装饰器的实际就是闭包和传递函数的结合</p><p>就是有了<strong>@函数名</strong>这个结构，使得可以不用再向上面那样通过引入一个变量来接受这个返回的函数，而是在调用test函数时，自动完成上面的那三个外层函数，修饰器是<strong>自下而上</strong>的调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x=func()</span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x=func()</span><br><span class="line">        <span class="keyword">return</span> x*x*x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x=func()</span><br><span class="line">        <span class="keyword">return</span> x*x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@add</span></span><br><span class="line"><span class="meta">@cube</span></span><br><span class="line"><span class="meta">@square</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((test()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果使用正常的闭包，则这样书写：</span></span><br><span class="line">fan1=square(test)</span><br><span class="line">fan2=cube(fan1)</span><br><span class="line">fan3=add(fan2)</span><br><span class="line"><span class="built_in">print</span>(fan3())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lambda表达式："><a href="#lambda表达式：" class="headerlink" title="lambda表达式："></a>lambda表达式：</h3><p>格式：lambda变量：表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squareY =<span class="keyword">lambda</span> y:y*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squareY(<span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=[<span class="keyword">lambda</span> x:x*x,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y[<span class="number">0</span>](y[<span class="number">1</span>])</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mapped =<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">ord</span>(x),<span class="string">&quot;XiaoW&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(mapped)</span><br><span class="line">[<span class="number">88</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">111</span>, <span class="number">87</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="生成器："><a href="#生成器：" class="headerlink" title="生成器："></a>生成器：</h3><p>使用<strong>yield</strong></p><p>生成器相当于一个迭代器，但是与迭代器又有着区别，生成器每次都可以取一个数值，但是不能通过下标进行索引，可以使用next进行取值，生成器每次只生成一个数据</p><p>生成器的设置：</p><p>1、将函数的return替换为yield</p><p>2、使用生成器推导式（与列表推导式有异曲同工之处）</p><p>使用生成器输出斐波那契数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fib</span>():</span><br><span class="line">x,y=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">yield</span> x</span><br><span class="line">x,y=y,x+y</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib()</span><br><span class="line">&lt;generator <span class="built_in">object</span> fib at <span class="number">0x000002277FB75820</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="函数文档、类型注释、内省"><a href="#函数文档、类型注释、内省" class="headerlink" title="函数文档、类型注释、内省"></a>函数文档、类型注释、内省</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">times</span>(<span class="params">s:<span class="built_in">list</span>,n:<span class="built_in">int</span></span>) -&gt;<span class="built_in">list</span>:</span><br><span class="line"><span class="keyword">return</span> s*n</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>times([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">times</span>(<span class="params">s:<span class="built_in">list</span>[<span class="built_in">int</span>]=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],n:<span class="built_in">int</span>=<span class="number">3</span></span>) -&gt;<span class="built_in">list</span>:</span><br><span class="line"><span class="keyword">return</span> s*n</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>times()</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>上面代码的意思是：</p><p>我希望s的格式可以使list形式，n的形式可以是整数型，得到的结果可以是列表格式，而且也可以设置默认值</p><h4 id="内省"><a href="#内省" class="headerlink" title="内省:"></a>内省:</h4><p>就是通过_ 操作_ 来表示，输出其操作的结果</p><h3 id="高级函数："><a href="#高级函数：" class="headerlink" title="高级函数："></a>高级函数：</h3><p>可以理解为已经内置好的函数，需要引入模块使用的函数</p><h2 id="永久存储："><a href="#永久存储：" class="headerlink" title="永久存储："></a>永久存储：</h2><h3 id="1、建立"><a href="#1、建立" class="headerlink" title="1、建立"></a>1、建立</h3><p><strong>函数原型：</strong></p><p><strong>open(file,mode&#x3D;’r’,buffering&#x3D;-1,encoding&#x3D;None,error&#x3D;None)</strong></p><p>文件的打开与建立：</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207152125703.png" alt="image-20240207152125703"></p><p>文件的存储与写入：</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207151043274.png" alt="image-20240207151043274"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f=open(&quot;XiaoW.txt&quot;,&quot;w&quot;)</span><br><span class="line">&gt;&gt;&gt; f.write(&quot;I Love Python&quot;)</span><br><span class="line">13</span><br><span class="line">&gt;&gt;&gt; f.writelines([&quot;I love XiaoW\n&quot;,&quot;Ilove game&quot;])</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>如果不执行close操作，那么在txt里面看不到你输得数据，同时该文件会存储到你的python目录中</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207175725835.png" alt="image-20240207175725835"></p><h3 id="2、路径："><a href="#2、路径：" class="headerlink" title="2、路径："></a>2、路径：</h3><p>使用pathlib模块函数：</p><p>3、with语句：</p><p>可以自动关闭程序，并且可以使程序在出错后依然可以保存写入的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;XiaoW.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;I love Python!&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    f.write(<span class="string">&quot;i love XiaoW&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">结果：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/waaa/Desktop/python/修饰器.py&quot;</span>, line <span class="number">37</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207181953700.png" alt="image-20240207181953700"></p><p>可见，尽管代码出错，但是依旧可以存入数据，但是只能处理出错代码前的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;XiaoW.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;I love game!&quot;</span>)</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br><span class="line">f.write(<span class="string">&quot;i love XiaoW&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>他依旧会报错，但是他没有存入数据</p><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207182523529.png" alt="image-20240207182523529"></p><h4 id="pickle模块："><a href="#pickle模块：" class="headerlink" title="pickle模块："></a><strong>pickle模块</strong>：</h4><p>dump与load函数</p><p>使用dump将数据转换为2进制数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x,y,z=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">s=<span class="string">&quot;XiaoW&quot;</span></span><br><span class="line">l=[<span class="string">&quot;hhh&quot;</span>,<span class="number">520</span>,<span class="number">3.14</span>]</span><br><span class="line">d=&#123;<span class="string">&quot;one&quot;</span>:<span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.pkl&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump((x,y,z,s,l,d),f)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/python%E5%AD%A6%E4%B9%A0/image-20240207195011682.png" alt="image-20240207195011682"></p><p>使用load函数，将2进制函数转换实际数据，进行解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.pkl&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    x,y,z,s,l,d=pickle.load(f)</span><br><span class="line"><span class="built_in">print</span>(x,y,z,s,l,d, sep=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">XiaoW</span><br><span class="line">[<span class="string">&#x27;hhh&#x27;</span>, <span class="number">520</span>, <span class="number">3.14</span>]</span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h2 id="异常："><a href="#异常：" class="headerlink" title="异常："></a>异常：</h2><p><strong>格式：</strong></p><h4 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    “错误”</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    </span><br><span class="line">    “提示”</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如：当try里面的语句执行错误·的时候，就会抛出except里面的异常，如果try没有错误，那么就正常输出结果，不再执行except语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">1/0</span><br><span class="line">except:</span><br><span class="line">print(&quot;出错啦！&quot;)</span><br><span class="line"></span><br><span class="line">出错啦！</span><br></pre></td></tr></table></figure><p>也可以明确某种错误类型，如果错误不是这种类型，那么便不会再执行except，而是直接爆出错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;除数不能为0！&quot;</span>)</span><br><span class="line"></span><br><span class="line">除数不能为<span class="number">0</span>！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"><span class="number">520</span>+<span class="string">&quot;XiaoW&quot;</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;除数不能为0！&quot;</span>)</span><br><span class="line"></span><br><span class="line">SyntaxError: invalid character <span class="string">&#x27;！&#x27;</span> (U+FF01)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>也可以使用多个except进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="number">520</span>+<span class="string">&quot;XiaoW&quot;</span></span><br><span class="line"><span class="keyword">except</span> (ZeroDivisionError,ValueError,TypeError):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="number">520</span>+<span class="string">&quot;XiaoW&quot;</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;除数不能为0！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;值不正确&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类型不正确&quot;</span>)</span><br><span class="line"></span><br><span class="line">除数不能为<span class="number">0</span>！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>可以搭配 try：except：else：或者：</p><p>​try：except：efinally：&#x2F;try finally搭配</p><p>欠着表示，如果try语句正确，那么就输出结果，并且执行else语句</p><p>后者表示：无论try语句正确与否，都会执行finally语句</p><h4 id="raise语句："><a href="#raise语句：" class="headerlink" title="raise语句："></a>raise语句：</h4><p>用于自爆错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> ValueError(<span class="string">&quot;值不正确！&quot;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#143&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;值不正确！&quot;</span>)</span><br><span class="line">ValueError: 值不正确！</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h4 id="assert语句："><a href="#assert语句：" class="headerlink" title="assert语句："></a>assert语句：</h4><p>用于代码调试，如果结果与预期不一样，就会直接抛出错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;hhhhhh&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> s == <span class="string">&quot;hhhhhh&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> s != <span class="string">&quot;hhhhhh&quot;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#151&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">assert</span> s != <span class="string">&quot;hhhhhh&quot;</span></span><br><span class="line">AssertionError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moectf的junk_code题解</title>
      <link href="/post/64c44478.html"/>
      <url>/post/64c44478.html</url>
      
        <content type="html"><![CDATA[<h1 id="Moectf的junk-code"><a href="#Moectf的junk-code" class="headerlink" title="Moectf的junk_code"></a><strong>Moectf的junk_code</strong></h1><p>首先根据题目提示可知，是一道花指令的题目：</p><p>拉入die中查询可知是win32位无壳程序</p><p>首先，shift+F12根据字符串找到主函数，F5进行反编译，如图：</p><p><img src="/post/64c44478/1.png" alt="image-20240124230736032"></p><p>根据伪代码可知，先让咱们输入一个36位的flag，然后根据3个条件进行判断，第一个if就是查询长度，第二个和第三个才是主要的：</p><p><img src="/post/64c44478/2.png" alt="image-20240124230913793"></p><p><img src="/post/64c44478/3.png" alt="image-20240124230924881"></p><p>两个函数都标红了，说明ida没有进行反编译出来，其中含有花指令</p><p>点击Tab键，进入汇编语言页面：</p><p><img src="/post/64c44478/4.png" alt="image-20240124231155621"></p><p>发现下面是一堆数据，可以知道此处花指令填充了大量的垃圾数据进行干扰反编译，所以将call指令的E8转换为NOP90即可，首先在call指令出点击U，将其重新识别为无定义，然后再修改E8位90</p><p><img src="/post/64c44478/5.png" alt="image-20240124231546715"></p><p>然后在004605D0处点击P，重新生成函数</p><p><img src="/post/64c44478/6.png" alt="image-20240124231652662"></p><p>下面的那一处也同样修改，修改完成后点击F5重新反编译</p><p><img src="/post/64c44478/7.png" alt="image-20240124231820576"></p><p><img src="/post/64c44478/8.png" alt="image-20240124231835962"></p><p>反编译完是这样两个函数，根据其代码重新将其逆回去，下面给出代码；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data1=[0x68, 0x6A, 0x60, 0x5E, 0x6F, 0x61, 0x76, 0x74, 0x2B, 0x70, </span><br><span class="line">  0x5A, 0x6D, 0x60, 0x68, 0x2B, 0x71, 0x2E, 0x5F]</span><br><span class="line">x=[i+5 for i in data1]</span><br><span class="line">enc1=&#x27;&#x27;</span><br><span class="line">for i in range(len(x)):</span><br><span class="line">    enc1+=chr(x[i])</span><br><span class="line"></span><br><span class="line">data2=[ 0x39, 0x12, 0x0E, 0x55, 0x39, 0x0C, 0x13, 0x08, 0x0D, 0x39, </span><br><span class="line">  0x05, 0x56, 0x02, 0x55, 0x47, 0x47, 0x47, 0x1B]</span><br><span class="line">enc2=&#x27;&#x27;</span><br><span class="line">for i in range(len(data2)):</span><br><span class="line">    enc2+=chr(data2[i]^0x66)</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">flag=enc1+enc2</span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The First Blog</title>
      <link href="/post/cd01fd4c.html"/>
      <url>/post/cd01fd4c.html</url>
      
        <content type="html"><![CDATA[<p>​耗时三天，搭建了属于自己的博客，感谢硕神的指点与帮助（硕神yyds），在搭建的过程中，感觉到开发真的难，搞开发的都是大佬。</p>]]></content>
      
      
      
        <tags>
            
            <tag> “Blog 搭建” </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>书籍</title>
      <link href="/books/index.html"/>
      <url>/books/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间线</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>首页</title>
      <link href="/home/index.html"/>
      <url>/home/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[网络空间安全专业 reverse小白]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
